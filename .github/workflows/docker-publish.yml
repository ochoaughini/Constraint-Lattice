name: Docker Build and Push

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/docker-publish.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/docker-publish.yml'

env:
  GCP_PROJECT_ID: teak-amphora-464204-a7
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: constraint-lattice-repo
  IMAGE_NAME: constraint-lattice
  REGION: us-central1
  SERVICE_NAME: constraint-lattice

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          # Workload Identity Federation (recommended)
          workload_identity_provider: projects/${{ env.GCP_PROJECT_ID }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: github-actions@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          # Using Workload Identity Federation for authentication
          # Remove service_account_key if using Workload Identity Federation
          # service_account_key: ${{ secrets.GCP_SA_KEY }}
          # export_default_credentials is not a valid input for setup-gcloud@v1
          # It's automatically handled by the action

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      - name: Login to Google Container Registry
        if: env.GCP_SA_KEY != ''
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=ghac,mode=max
          build-args: |
            TARGETPLATFORM=linux/amd64
            PYTHON_VERSION=3.11.13
            POETRY_VERSION=1.7.1

      - name: Deploy to Cloud Run (if on main branch)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          region: ${{ env.REGION }}
          image: ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          service: ${{ env.SERVICE_NAME }}
          env_vars: PORT=8080
          # Allow unauthenticated access to the service
          # The action will handle the conversion to the correct format
          allow_unauthenticated: true
