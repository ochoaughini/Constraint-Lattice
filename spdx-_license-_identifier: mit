"""
License Header Inserter and Cleaner
SPDX License Integration Utility
Author: ochoaughini
"""

import os
import sys
import re
import clean_old_headers  # External module to remove outdated headers

MIT_HEADER = """SPDX-License-Identifier: MIT\nCopyright (c) 2025 ochoaughini. See LICENSE for full terms."""
BSL_HEADER = """SPDX-License-Identifier: BSL-1.1\nCopyright (c) 2025 Lexsight LCC. All rights reserved.\nSee saas/LICENSE-BSL.txt for full terms."""

COMMENT_STYLES = {
    '.py': '#',
    '.js': '//',
    '.ts': '//',
    '.css': '/*',
    '.html': '<!--'
}

def get_header(comment_style, header_text):
    if comment_style == '/*':
        return f"/*\n{header_text}\n*/\n"
    elif comment_style == '<!--':
        return f"<!--\n{header_text}\n-->\n"
    lines = header_text.split('\n')
    return '\n'.join(f"{comment_style} {line}" for line in lines if line.strip()) + '\n'

def is_text_file(file_path):
    with open(file_path, 'rb') as f:
        return b'\0' not in f.read(1024)

def add_header_to_file(file_path, header):
    if not os.path.isfile(file_path) or not is_text_file(file_path):
        print(f"Skipping binary or non-file: {file_path}")
        return

    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # Remove old SPDX-style headers
    content = re.sub(r'^\s*[#/<!-]*\s*SPDX-License-Identifier:.*?$\n?', '', content, flags=re.MULTILINE)

    if content.startswith(header):
        print(f"Header already present in {file_path}")
        return

    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(header + content)
    print(f"Added header to {file_path}")

def main():
    clean_old_headers.main()
    repo_root = os.getcwd()
    for root, dirs, files in os.walk(repo_root):
        dirs[:] = [d for d in dirs if not d.startswith('.')]
        for file in files:
            ext = os.path.splitext(file)[1]
            if ext in COMMENT_STYLES:
                path = os.path.join(root, file)
                relative_path = os.path.relpath(path, repo_root)
                comment = COMMENT_STYLES[ext]
                header = get_header(comment, BSL_HEADER if relative_path.startswith(('saas', 'api', 'billing')) else MIT_HEADER)
                add_header_to_file(path, header)

if __name__ == '__main__':
    main()
