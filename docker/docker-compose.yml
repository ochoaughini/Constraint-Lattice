version: '3.8'

services:
  fastapi-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: constraint-lattice-api-local
    env_file:
      - .env
    ports:
      - "8000:8000" # Map host port 8000 to container port 8000
    volumes:
      - .:/app # Mount local code for development
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      redis:
        condition: service_healthy

  redis:
    image: redis:latest
    container_name: constraint-lattice-redis-local
    ports:
      - "6379:6379" # Map host port 6379 to container port 6379
    volumes:
      - redis_data:/data # Persist Redis data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - app-network

  wordpress:
    build:
      context: .
      dockerfile: Dockerfile-wordpress-plugin # Use the dedicated Dockerfile for WordPress
    container_name: wordpress-local
    ports:
      - "8080:80" # Map host port 8080 to container port 80
    environment:
      # WordPress requires database connection details
      - WORDPRESS_DB_HOST=db
      - WORDPRESS_DB_USER=${MYSQL_USER}
      - WORDPRESS_DB_PASSWORD=${MYSQL_PASSWORD}
      - WORDPRESS_DB_NAME=${MYSQL_DATABASE}
      - WORDPRESS_TABLE_PREFIX=wp_
    volumes:
      # Mount WordPress core files for persistence (optional)
      # - wordpress_data:/var/www/html
      # Mount custom plugin and themes if you have them
      - ./wp-plugin/constraint-lattice-api:/var/www/html/wp-content/plugins/constraint-lattice-api
      # Mount custom themes if you have any
      # - ./wp-content/themes:/var/www/html/wp-content/themes
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/wp-login.php"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy

  db:
    image: mysql:8.0
    container_name: wordpress-db-local
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - mysql_data:/var/lib/mysql # Persist MySQL data
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:latest
    container_name: constraint-lattice-kafka-local
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
    networks:
      - app-network
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: constraint-lattice-zookeeper-local
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network

volumes:
  redis_data:
  mysql_data:
  # wordpress_data: # Uncomment if you want to persist WordPress core files

networks:
  app-network:
    driver: bridge